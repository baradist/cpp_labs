/*************************************************************
Практическое занятие №6. Структуры
//динамический массив структур
//поиск
//сортировка
//сохранение в файле
//чтение из файла
*************************************************************/

#include <clocale>
#include <cstdio>
#include "book.h"
#include "card_index.h"

//#define	  stop __asm nop


int main()
{
	//Используйте структуру BOOK, созданную в предыдущей работе.
	//Для этого достаточно переписать и подключить к проекту файлы
	//book.h и book.cpp

	//Упрощения:
	//1. пусть автор и заглавие книги состоят из одного слова
	//2. все строки можно задавать латинскими буквами. Если хочется
	//   не только выводить, но и вводить русские символы, следует
	//   а) пользоваться расширенными функциями ввода/вывода - wprintf(), wscanf()
	//   б) хранить строки как расширенные - wchar_t
	//   в) установить кодировку - setlocale(LC_CTYPE, ".866");

    //setlocale(LC_CTYPE, ".866");

	//Задание 1. Создаем «картотеку».
	//«Картотека» - это массив структур => нужно такой массив создать.
	//Замечание: размер массива придется увеличивать по мере добавления книг =>
	//каким должен быть такой массив???

	BOOK *pB = new BOOK[2];
	CARD_INDEX cardIndex = { &pB, 0, 2};
    //cardIndex.cap = 2;
    //*cardIndex.pB = new BOOK[cardIndex.cap];

	//Пользователь должен иметь возможность по своему желанию выполнять
	//разные действия с картотекой => нужно такую возможность ему
	//предоставить: это может выглядеть как вывод "меню" (перечень
	//возможных действий и соответствующих реакций пользователя), например:
	//Распечатать содержимое картотеки (1)
	//Ввести новую книгу (2)
	//Удалить существующую(ие) (3)
	//Записать текущее содержимое картотеки в файл (4)
	//Считать из файла содержимое в картотеку (5)
	//...
	//Выход из программы (...)

	//Реализуйте посредством функций разные возможности работы с картотекой

    printf("Welcome to our library!\n");
    char actionNumber = 'x';
    while (true) {
        printf("1) print books\n"
               "2) add a new book\n"
               "3) remove books\n"
               "4) export books to a file\n"
               "5) import books from a file\n"
               "x) EXIT\n"
               "(type 1-5 or x):\n");
        scanf("%c", &actionNumber);
        switch (actionNumber) {
            case '1':
                printBooks(cardIndex);
                break;
            case '2':
				// add a new book
			{
				BOOK *newBook = new BOOK;
				if (!fillNewBook(*newBook)) {
					delete newBook;
					continue;
				}
				addBook(&cardIndex, *newBook);
			}
                break;
            case '3':
                // remove books
                break;
            case '4':
                // export
                break;
            case '5':
                // import
                break;
            case 'x':
            case 'X':
                return 0;
        }
    }

	//Подсказка: для файлового ввода/вывода используйте функции fprintf и fscanf
	//(заголовочный файл <cstdio>



	




	//****************************************************************
	//Задание 2. Предоставьте пользователю возможность выводить перечень книг
	//в определенном порядке => напишите функцию (функции) сортировки массива
	//по любому из полей структуры.
	//Замечание: признак - "по какому полю сортируем" можно ввести с помощью
	//перечисления.



}
